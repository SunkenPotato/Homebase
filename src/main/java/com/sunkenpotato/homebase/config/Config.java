package com.sunkenpotato.homebase.config;

import java.io.*;
import java.util.Optional;
import java.util.Properties;

import static com.sunkenpotato.homebase.MainApplication.LOGGER;

public class Config {
    public static final Config INSTANCE = new Config();

    private final Properties CONFIG_PROPERTIES = new Properties();
    private final Properties DEFAULT_PROPERTIES = new Properties();

    public final File CONFIG_FILE;
    public final InputStream DEFAULT_CONFIG_FILE;

    private Config() {
        CONFIG_FILE = new File(expandTilde("~/.config/Homebase/config.properties"));
        DEFAULT_CONFIG_FILE = getClass().getResourceAsStream("default.properties");

        try {
            CONFIG_PROPERTIES.load(openInputStream(CONFIG_FILE));
            DEFAULT_PROPERTIES.load(DEFAULT_CONFIG_FILE);
        } catch (IOException e) {
            LOGGER.error("Could not load config file: ", e);
        }

        System.out.println(CONFIG_PROPERTIES);
    }

    private FileInputStream openInputStream(File file) {
        try {
            return new FileInputStream(file);
        } catch (FileNotFoundException e) {
            LOGGER.warn("Config file not found, attempting creation.");
            try {
                if (!file.getParentFile().mkdirs() && !file.createNewFile()) {
                    LOGGER.error("Could not create config file");
                    throw new RuntimeException();
                }
                return openInputStream(file);
            } catch (IOException innerException) {
                throw new RuntimeException(innerException);
            }
        }
    }

    public static String expandTilde(String path) {
        String tildeExpansion = System.getProperty("user.home");
        return path.replace("~", tildeExpansion);
    }

    public Optional<String> getDefault(String key) {
        return Optional.ofNullable(CONFIG_PROPERTIES.getProperty(key));
    }

    public Optional<String> get(String key) {
        String value = CONFIG_PROPERTIES.getProperty(key);
        String defaultValue = DEFAULT_PROPERTIES.getProperty(key);

        if (value == null) {
            if (defaultValue == null) {
                return Optional.empty();
            }
            else return Optional.of(defaultValue);
        } else return Optional.of(value);
    }

    public void set(String key, String value) {
        String finalValue;
        if (value.isEmpty())
            finalValue = getDefault(key).orElseThrow();
        else finalValue = value;
        CONFIG_PROPERTIES.setProperty(key, finalValue);
    }

    public void save() {
        try(FileOutputStream fos = new FileOutputStream(CONFIG_FILE)) {
            CONFIG_PROPERTIES.store(fos, "Do not edit this file by hand. It can lead to unexpected exceptions in the app, causing it to crash.");
        } catch (IOException e) {
            LOGGER.error("Could not save config file: {}", CONFIG_FILE, e);
        }
    }

}
